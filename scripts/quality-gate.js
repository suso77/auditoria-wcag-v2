/**
 * ‚ôø Quality Gate ‚Äì Auditor√≠a WCAG (modo recopilaci√≥n + compatibilidad total)
 * ---------------------------------------------------------------------------
 * ‚úÖ No bloquea el flujo CI/CD (ideal para auditor√≠as)
 * ‚úÖ Funciona local y en GitHub Actions (aunque GITHUB_STEP_SUMMARY sea undefined)
 * ‚úÖ Muestra resumen visual y guarda todos los conteos
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const auditoriasDir = path.join(__dirname, "..", "auditorias");

// üß± Buscar el √∫ltimo archivo de resultados combinados
const files = fs
  .readdirSync(auditoriasDir)
  .filter(f => f.startsWith("results-merged-") && f.endsWith(".json"))
  .map(f => ({
    name: f,
    time: fs.statSync(path.join(auditoriasDir, f)).mtime.getTime(),
  }))
  .sort((a, b) => b.time - a.time);

if (!files.length) {
  console.error("‚ùå No se encontr√≥ ning√∫n archivo results-merged-*.json");
  process.exit(0);
}

const latestFile = path.join(auditoriasDir, files[0].name);
console.log(`üìä Analizando resultados desde: ${latestFile}`);

const data = JSON.parse(fs.readFileSync(latestFile, "utf8"));
if (!Array.isArray(data) || !data.length) {
  console.error("‚ùå El archivo est√° vac√≠o o no tiene formato v√°lido.");
  process.exit(0);
}

// üìà Contadores globales
let stats = { critical: 0, serious: 0, moderate: 0, minor: 0, total: 0 };

for (const page of data) {
  const violations = page.violations || [];
  for (const v of violations) {
    stats.total++;
    if (stats[v.impact] !== undefined) stats[v.impact]++;
  }
}

// üö¶ Mostrar resumen en consola
console.log("üìã Resumen de violaciones detectadas:");
console.log(`   üî¥ Cr√≠ticas : ${stats.critical}`);
console.log(`   üü† Serias   : ${stats.serious}`);
console.log(`   üü° Moderadas: ${stats.moderate}`);
console.log(`   üü¢ Menores  : ${stats.minor}`);
console.log(`   üìÑ Total    : ${stats.total}`);

// üìÑ Intentar crear resumen visual si es posible
const summaryPath = process.env.GITHUB_STEP_SUMMARY;
if (summaryPath && typeof summaryPath === "string") {
  try {
    const summary = `
## ‚ôø Informe de Control de Calidad ‚Äì WCAG

| Severidad | Conteo | Emoji |
|------------|--------|--------|
| üî¥ Cr√≠ticas | ${stats.critical} | üî• |
| üü† Serias | ${stats.serious} | ‚ö†Ô∏è |
| üü° Moderadas | ${stats.moderate} | üïµÔ∏è |
| üü¢ Menores | ${stats.minor} | üí° |
| üìÑ **Total** | **${stats.total}** | ‚úÖ |

üìä **Archivo analizado:** \`${path.basename(latestFile)}\`

> Este informe recopila todas las violaciones detectadas.  
> El pipeline no falla (modo auditor√≠a).
    `;
    fs.appendFileSync(summaryPath, summary, "utf8");
    console.log("üìù Resumen visual a√±adido a GITHUB_STEP_SUMMARY");
  } catch (err) {
    console.warn("‚ö†Ô∏è No se pudo escribir el resumen en GitHub:", err.message);
  }
} else {
  console.log("‚ÑπÔ∏è No se encontr√≥ variable GITHUB_STEP_SUMMARY (ejecuci√≥n local o runner limitado).");
}

console.log("‚úÖ Auditor√≠a completada con √©xito (sin bloquear el flujo).");
process.exit(0);



